import telebot
from telebot import types
import schedule
import time
from datetime import datetime, timedelta
import threading
import json
from pytube import Playlist

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = 'YOUR_TOKEN'
bot = telebot.TeleBot(TOKEN)

# URL –≤–∞—à–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
PLAYLIST_URL = 'https://www.youtube.com/playlist?list=PLD6SPjEPomat1rP0ZZdD4VIHKSx_YhRvG'

def load_playlist_videos():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ YouTube —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
    MAX_RETRIES = 3
    MAX_VIDEOS = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    
    for attempt in range(MAX_RETRIES):
        try:
            playlist = Playlist(PLAYLIST_URL)
            videos = []
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ URL –≤–∏–¥–µ–æ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            video_urls = list(playlist.video_urls)[:MAX_VIDEOS]
            
            for index, url in enumerate(video_urls, 1):
                videos.append({
                    'id': index,
                    'title': f'–í–∏–¥–µ–æ {index}',  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    'url': url
                })
                
            if videos:
                print(f"Successfully loaded {len(videos)} videos")
                return videos
                
        except Exception as e:
            print(f"Attempt {attempt + 1}/{MAX_RETRIES} failed: {e}")
            if attempt < MAX_RETRIES - 1:
                time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            continue
    
    print("Failed to load playlist after all attempts")
    return []

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
PLAYLIST_VIDEOS = load_playlist_videos()

# –°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã
SUBJECTS = {
    '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': {
        'name': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
        'link': 'https://kompege.ru/',
        'has_link': True
    },
    '—Ä—É—Å—Å–∫–∏–π': {
        'name': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
        'link': 'https://stepik.org/course/92015/syllabus',
        'has_link': True
    },
    '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': {
        'name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
        'link': None,
        'has_link': False
    }
}

@bot.message_handler(func=lambda message: message.text == '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ')
def mark_completion(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–∑ SUBJECTS
    markup = types.InlineKeyboardMarkup()
    for subject_key, subject_data in SUBJECTS.items():
        markup.add(types.InlineKeyboardButton(
            subject_data['name'],
            callback_data=f"complete_{subject_key}"
        ))
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏–∑—É—á–∏–ª–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("complete_"))
def handle_completion(call):
    user_id = str(call.from_user.id)
    subject_key = call.data.split('_')[1]
    
    today = datetime.now().strftime('%Y-%m-%d')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'completed_tasks' not in users_data[user_id]:
        users_data[user_id]['completed_tasks'] = {}
    if today not in users_data[user_id]['completed_tasks']:
        users_data[user_id]['completed_tasks'][today] = []
    
    if subject_key not in users_data[user_id]['completed_tasks'][today]:
        users_data[user_id]['completed_tasks'][today].append(subject_key)
        save_users_data()
        response = f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç {SUBJECTS[subject_key]['name']} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã–π!"
    else:
        response = f"‚ùó –í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ {SUBJECTS[subject_key]['name']} —Å–µ–≥–æ–¥–Ω—è"
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def show_statistics(message):
    user_id = str(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    subject_stats = {subject: 0 for subject in SUBJECTS.keys()}
    total_days = set()  # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –∑–∞–Ω—è—Ç–∏–π
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for date, completed in users_data[user_id].get('completed_tasks', {}).items():
        total_days.add(date)
        for subject in completed:
            if subject in subject_stats:
                subject_stats[subject] += 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–µ–æ
    videos_watched = len(users_data[user_id].get('completed_videos', []))
    total_videos = len(PLAYLIST_VIDEOS)
    video_progress = (videos_watched / total_videos * 100) if total_videos > 0 else 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    response += f"üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π –∑–∞–Ω—è—Ç–∏–π: {len(total_days)}\n"
    response += f"üé• –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–∏–¥–µ–æ: {videos_watched}/{total_videos} ({video_progress:.1f}%)\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    response += "üìö –ü–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:\n"
    for subject_key, count in subject_stats.items():
        response += f"- {SUBJECTS[subject_key]['name']}: {count} –¥–Ω–µ–π\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    recent_stats = {subject: 0 for subject in SUBJECTS.keys()}
    recent_days = 0
    
    for date, completed in users_data[user_id].get('completed_tasks', {}).items():
        if date >= week_ago:
            recent_days += 1
            for subject in completed:
                if subject in recent_stats:
                    recent_stats[subject] += 1
    
    response += "\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n"
    response += f"- –î–Ω–µ–π –∑–∞–Ω—è—Ç–∏–π: {recent_days}/7\n"
    for subject_key, count in recent_stats.items():
        response += f"- {SUBJECTS[subject_key]['name']}: {count} –¥–Ω–µ–π\n"
    
    bot.reply_to(message, response)

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
def load_users_data():
    try:
        with open('users_data.json', 'r') as file:
            data = json.load(file)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user_id in data:
                if 'completed_tasks' not in data[user_id]:
                    data[user_id]['completed_tasks'] = {}
                if 'completed_videos' not in data[user_id]:
                    data[user_id]['completed_videos'] = []
            return data
    except FileNotFoundError:
        return {}

def save_users_data():
    with open('users_data.json', 'w') as file:
        json.dump(users_data, file)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    if user_id not in users_data:
        users_data[user_id] = {
            'notification_time': '16:00',
            'completed_tasks': {},
            'completed_videos': [],
            'current_video_id': 1,
            'reminders_active': True
        }
        save_users_data()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üìö –ü—Ä–µ–¥–º–µ—Ç—ã', 'üì∫ –¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ')
    markup.row('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä')
    markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–ª–µ–π–ª–∏—Å—Ç–∞')
    markup.row('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å')
    markup.row('üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    
    bot.reply_to(message, 
                 "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º.\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                 reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def settings(message):
    markup = types.ForceReply()
    bot.send_message(message.chat.id, 
                     f'''–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):
–°–µ–π—á–∞—Å: {users_data[str(message.from_user.id)]['notification_time']}''',
                     reply_markup=markup)

@bot.message_handler(func=lambda message: message.reply_to_message and 
                    (message.reply_to_message.text.startswith("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è") or
                     message.reply_to_message.text.startswith("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")))
def set_notification_time(message):
    try:
        time.strptime(message.text, '%H:%M')
        users_data[str(message.from_user.id)]['notification_time'] = message.text
        save_users_data()
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('üìö –ü—Ä–µ–¥–º–µ—Ç—ã', 'üì∫ –¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ')
        markup.row('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä')
        markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–ª–µ–π–ª–∏—Å—Ç–∞')
        markup.row('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å')
        markup.row('üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
        
        bot.reply_to(message, f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text}", reply_markup=markup)
        
    except ValueError:
        markup = types.ForceReply()
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'])
def toggle_reminders(message):
    user_id = str(message.from_user.id)
    if message.text == 'üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        users_data[user_id]['reminders_active'] = True
        bot.reply_to(message, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
    else:
        users_data[user_id]['reminders_active'] = False
        bot.reply_to(message, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!")
    save_users_data()

@bot.message_handler(func=lambda message: message.text == 'üìö –ü—Ä–µ–¥–º–µ—Ç—ã')
def show_subjects(message):
    response = "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:\n\n"
    for subject_key, subject_data in SUBJECTS.items():
        response += f"üìñ {subject_data['name']}"
        if subject_data['has_link']:
            response += f"\nüîó {subject_data['link']}"
        response += "\n\n"
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text == 'üì∫ –¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ')
def show_current_video(message):
    user_id = str(message.from_user.id)
    current_video_id = users_data[user_id]['current_video_id']
    video = next((v for v in PLAYLIST_VIDEOS if v['id'] == current_video_id), None)
    
    if video:
        response = f"üé• {video['title']}\n\n"
        response += f"üîó {video['url']}\n\n"
        response += "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞!"
        bot.reply_to(message, response)
    else:
        bot.reply_to(message, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–µ—Å—å –ø–ª–µ–π–ª–∏—Å—Ç! üéâ")

@bot.message_handler(func=lambda message: message.text == '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä')
def mark_watched(message):
    user_id = str(message.from_user.id)
    current_video_id = users_data[user_id]['current_video_id']
    
    if current_video_id not in users_data[user_id]['completed_videos']:
        users_data[user_id]['completed_videos'].append(current_video_id)
        next_video_id = current_video_id + 1
        
        if any(v['id'] == next_video_id for v in PLAYLIST_VIDEOS):
            users_data[user_id]['current_video_id'] = next_video_id
            video = next((v for v in PLAYLIST_VIDEOS if v['id'] == next_video_id), None)
            response = "‚úÖ –í–∏–¥–µ–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ!\n\n"
            response += f"–°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ:\nüé• {video['title']}"
        else:
            response = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–µ—Å—å –ø–ª–µ–π–ª–∏—Å—Ç!"
        
        save_users_data()
        bot.reply_to(message, response)
    else:
        bot.reply_to(message, "–≠—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ!")

@bot.message_handler(func=lambda message: message.text == 'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–ª–µ–π–ª–∏—Å—Ç–∞')
def show_progress(message):
    user_id = str(message.from_user.id)
    completed = len(users_data[user_id]['completed_videos'])
    total = len(PLAYLIST_VIDEOS)
    progress = (completed / total) * 100 if total > 0 else 0
    
    response = f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–µ–π–ª–∏—Å—Ç—É:\n\n"
    response += f"‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {completed} –∏–∑ {total} –≤–∏–¥–µ–æ\n"
    response += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%"
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text == 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å')
def reset_progress(message):
    user_id = str(message.from_user.id)
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_yes"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="reset_no")
    )
    
    bot.reply_to(message, 
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞?\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!", 
                reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("reset_"))
def reset_progress_callback(call):
    user_id = str(call.from_user.id)
    
    if call.data == "reset_yes":
        users_data[user_id]['completed_videos'] = []
        users_data[user_id]['current_video_id'] = 1
        save_users_data()
        
        video = next((v for v in PLAYLIST_VIDEOS if v['id'] == 1), None)
        response = "üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!\n\n"
        if video:
            response += f"–ù–∞—á–Ω–∏—Ç–µ —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ:\nüé• {video['title']}\nüîó {video['url']}"
        
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, response)
        
    elif call.data == "reset_no":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "‚ùå –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω")

def send_reminder(user_id, subject_key, force=False):
    user_id_str = str(user_id)
    if not users_data[user_id_str]['reminders_active']:
        return

    current_time = datetime.now()
    today = current_time.strftime('%Y-%m-%d')
    
    if today in users_data[user_id_str].get('completed_tasks', {}) and \
       subject_key in users_data[user_id_str]['completed_tasks'][today]:
        return

    if not force:
        last_reminder = users_data[user_id_str].get('last_reminder', {}).get(subject_key)
        if last_reminder:
            last_reminder_time = datetime.fromisoformat(last_reminder)
            if (current_time - last_reminder_time).total_seconds() < 600:
                return

    subject_data = SUBJECTS[subject_key]
    message = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü–æ—Ä–∞ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º {subject_data['name']}"
    if subject_data['has_link']:
        message += f"\n\n–†–µ—Å—É—Ä—Å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {subject_data['link']}"
    
    try:
        bot.send_message(user_id, message)
        if 'last_reminder' not in users_data[user_id_str]:
            users_data[user_id_str]['last_reminder'] = {}
        users_data[user_id_str]['last_reminder'][subject_key] = current_time.isoformat()
        save_users_data()
    except Exception as e:
        print(f"Error sending reminder to {user_id}: {e}")

def send_video_reminder():
    current_time = datetime.now().strftime('%H:%M')
    
    for user_id, user_data in users_data.items():
        if user_data['reminders_active'] and current_time == user_data['notification_time']:
            current_video_id = user_data['current_video_id']
            video = next((v for v in PLAYLIST_VIDEOS if v['id'] == current_video_id), None)
            
            if video:
                message = "üîî –ü–æ—Ä–∞ —É—á–∏—Ç—å—Å—è!\n\n"
                message += f"–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –≤–∏–¥–µ–æ:\nüé• {video['title']}\n"
                message += f"üîó {video['url']}"
                try:
                    bot.send_message(user_id, message)
                except Exception as e:
                    print(f"Error sending reminder to {user_id}: {e}")

def check_and_send_reminders():
    current_time = datetime.now()
    current_time_str = current_time.strftime('%H:%M')
    
    for user_id, user_data in users_data.items():
        if current_time_str == user_data['notification_time']:
            for subject_key in SUBJECTS.keys():
                send_reminder(user_id, subject_key, force=True)
        else:
            for subject_key in SUBJECTS.keys():
                send_reminder(user_id, subject_key)

def schedule_checker():
    while True:
        schedule.run_pending()
        check_and_send_reminders()
        send_video_reminder()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
if __name__ == "__main__":
    print("Bot started...")
    users_data = load_users_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    reminder_thread = threading.Thread(target=schedule_checker, daemon=True)
    reminder_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.infinity_polling()