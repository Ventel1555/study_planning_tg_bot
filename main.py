import telebot
from telebot import types
import schedule
import time
from datetime import datetime, timedelta
import threading
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = 'YOUR_BOT_TOKEN'

bot = telebot.TeleBot(TOKEN)

# –°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã
SUBJECTS = {
    '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': {
        'name': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
        'link': 'https://inf-ege.sdamgia.ru/',  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω—É–∂–Ω—ã–π —Å–∞–π—Ç
        'has_link': True
    },
    '—Ä—É—Å—Å–∫–∏–π': {
        'name': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
        'link': 'https://rus-ege.sdamgia.ru/',  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω—É–∂–Ω—ã–π —Å–∞–π—Ç
        'has_link': True
    },
    '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': {
        'name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
        'link': None, # –º–Ω–µ –Ω–µ –Ω–∞–¥–æ
        'has_link': False
    }
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–¥)
users_data = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users_data():
    try:
        with open('users_data.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}
    
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users_data():
    with open('users_data.json', 'w') as file:
        json.dump(users_data, file)

# –ö–æ–º–∞–Ω–¥–∞ start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    if user_id not in users_data:
        users_data[user_id] = {
            'notification_time': '16:00',
            'completed_tasks': {},
            'reminders_active': True,
            'reminders_active': False
        }
        save_users_data()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üìö –ü—Ä–µ–¥–º–µ—Ç—ã', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    markup.row('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    markup.row('üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    
    bot.reply_to(message, 
                 "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º.\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                 reply_markup=markup)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@bot.message_handler(func=lambda message: message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def settings(message):
    markup = types.ForceReply()
    bot.send_message(message.chat.id, 
                     f'''–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):
–°–µ–π—á–∞—Å: {users_data[str(message.from_user.id)]['notification_time']}''',
                     reply_markup=markup)

@bot.message_handler(func=lambda message: message.reply_to_message and 
                    (message.reply_to_message.text.startswith("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è") or
                     message.reply_to_message.text.startswith("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")))
def set_notification_time(message):
    try:
        time.strptime(message.text, '%H:%M')
        users_data[str(message.from_user.id)]['notification_time'] = message.text
        save_users_data()
        
        mp = types.ReplyKeyboardMarkup(resize_keyboard=True)
        
        mp.row('üìö –ü—Ä–µ–¥–º–µ—Ç—ã', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        mp.row('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        mp.row('üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
        
        bot.reply_to(message, f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text}", reply_markup=mp)
        
    except ValueError:
        markup = types.ForceReply()
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'])
def toggle_reminders(message):
    user_id = str(message.from_user.id)
    if message.text == 'üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        users_data[user_id]['reminders_active'] = True
        bot.reply_to(message, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
    else:
        users_data[user_id]['reminders_active'] = False
        bot.reply_to(message, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!")
    save_users_data()
    
@bot.message_handler(func=lambda message: message.text == 'üìö –ü—Ä–µ–¥–º–µ—Ç—ã')
def show_subjects(message):
    response = "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:\n\n"
    for subject_key, subject_data in SUBJECTS.items():
        response += f"üìñ {subject_data['name']}"
        if subject_data['has_link']:
            response += f"\nüîó {subject_data['link']}"
        response += "\n\n"
    bot.reply_to(message, response)

def send_reminder(user_id, subject_key, force=False):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    force=True –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç 10-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
    """
    user_id_str = str(user_id)
    if not users_data[user_id_str]['reminders_active']:
        return

    current_time = datetime.now()
    today = current_time.strftime('%Y-%m-%d')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–∏–µ
    if today in users_data[user_id_str].get('completed_tasks', {}) and \
       subject_key in users_data[user_id_str]['completed_tasks'][today]:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    if not force:
        last_reminder = users_data[user_id_str].get('last_reminder', {}).get(subject_key)
        if last_reminder:
            last_reminder_time = datetime.fromisoformat(last_reminder)
            if (current_time - last_reminder_time).total_seconds() < 600:  # 10 –º–∏–Ω—É—Ç
                return

    subject_data = SUBJECTS[subject_key]
    message = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü–æ—Ä–∞ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º {subject_data['name']}"
    if subject_data['has_link']:
        message += f"\n\n–†–µ—Å—É—Ä—Å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {subject_data['link']}"
    
    try:
        bot.send_message(user_id, message)
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if 'last_reminder' not in users_data[user_id_str]:
            users_data[user_id_str]['last_reminder'] = {}
        users_data[user_id_str]['last_reminder'][subject_key] = current_time.isoformat()
        save_users_data()
    except Exception as e:
        print(f"Error sending reminder to {user_id}: {e}")
           
def check_and_send_reminders():
    current_time = datetime.now()
    current_time_str = current_time.strftime('%H:%M')
    
    for user_id, user_data in users_data.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if current_time_str == user_data['notification_time']:
            for subject_key in SUBJECTS.keys():
                send_reminder(user_id, subject_key, force=True)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        else:
            for subject_key in SUBJECTS.keys():
                send_reminder(user_id, subject_key)
                
def schedule_checker():
    while True:
        schedule.run_pending()
        check_and_send_reminders()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
if __name__ == "__main__":
    print("Bot started...")
    users_data = load_users_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    reminder_thread = threading.Thread(target=schedule_checker, daemon=True)
    reminder_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.infinity_polling()